// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2021 20:27:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto_final_forca_bruta
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto_final_forca_bruta_vlg_sample_tst(
	aclr,
	choose,
	clock,
	clock_ram_2,
	datain,
	pos_manual,
	we,
	sampler_tx
);
input  aclr;
input  choose;
input  clock;
input  clock_ram_2;
input [7:0] datain;
input [7:0] pos_manual;
input  we;
output sampler_tx;

reg sample;
time current_time;
always @(aclr or choose or clock or clock_ram_2 or datain or pos_manual or we)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto_final_forca_bruta_vlg_check_tst (
	comp_result,
	count_output,
	dataout,
	output_memory,
	q,
	sampler_rx
);
input  comp_result;
input [7:0] count_output;
input [7:0] dataout;
input [7:0] output_memory;
input [7:0] q;
input sampler_rx;

reg  comp_result_expected;
reg [7:0] count_output_expected;
reg [7:0] dataout_expected;
reg [7:0] output_memory_expected;
reg [7:0] q_expected;

reg  comp_result_prev;
reg [7:0] count_output_prev;
reg [7:0] dataout_prev;
reg [7:0] output_memory_prev;
reg [7:0] q_prev;

reg  comp_result_expected_prev;
reg [7:0] count_output_expected_prev;
reg [7:0] dataout_expected_prev;
reg [7:0] output_memory_expected_prev;

reg  last_comp_result_exp;
reg [7:0] last_count_output_exp;
reg [7:0] last_dataout_exp;
reg [7:0] last_output_memory_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	comp_result_prev = comp_result;
	count_output_prev = count_output;
	dataout_prev = dataout;
	output_memory_prev = output_memory;
	q_prev = q;
end

// update expected /o prevs

always @(trigger)
begin
	comp_result_expected_prev = comp_result_expected;
	count_output_expected_prev = count_output_expected;
	dataout_expected_prev = dataout_expected;
	output_memory_expected_prev = output_memory_expected;
end



// expected comp_result
initial
begin
	comp_result_expected = 1'bX;
end 
// expected count_output[ 7 ]
initial
begin
	count_output_expected[7] = 1'bX;
end 
// expected count_output[ 6 ]
initial
begin
	count_output_expected[6] = 1'bX;
end 
// expected count_output[ 5 ]
initial
begin
	count_output_expected[5] = 1'bX;
end 
// expected count_output[ 4 ]
initial
begin
	count_output_expected[4] = 1'bX;
end 
// expected count_output[ 3 ]
initial
begin
	count_output_expected[3] = 1'bX;
end 
// expected count_output[ 2 ]
initial
begin
	count_output_expected[2] = 1'bX;
end 
// expected count_output[ 1 ]
initial
begin
	count_output_expected[1] = 1'bX;
end 
// expected count_output[ 0 ]
initial
begin
	count_output_expected[0] = 1'bX;
end 
// expected output_memory[ 7 ]
initial
begin
	output_memory_expected[7] = 1'bX;
end 
// expected output_memory[ 6 ]
initial
begin
	output_memory_expected[6] = 1'bX;
end 
// expected output_memory[ 5 ]
initial
begin
	output_memory_expected[5] = 1'bX;
end 
// expected output_memory[ 4 ]
initial
begin
	output_memory_expected[4] = 1'bX;
end 
// expected output_memory[ 3 ]
initial
begin
	output_memory_expected[3] = 1'bX;
end 
// expected output_memory[ 2 ]
initial
begin
	output_memory_expected[2] = 1'bX;
end 
// expected output_memory[ 1 ]
initial
begin
	output_memory_expected[1] = 1'bX;
end 
// expected output_memory[ 0 ]
initial
begin
	output_memory_expected[0] = 1'bX;
end 
// expected dataout[ 7 ]
initial
begin
	dataout_expected[7] = 1'bX;
end 
// expected dataout[ 6 ]
initial
begin
	dataout_expected[6] = 1'bX;
end 
// expected dataout[ 5 ]
initial
begin
	dataout_expected[5] = 1'bX;
end 
// expected dataout[ 4 ]
initial
begin
	dataout_expected[4] = 1'bX;
end 
// expected dataout[ 3 ]
initial
begin
	dataout_expected[3] = 1'bX;
end 
// expected dataout[ 2 ]
initial
begin
	dataout_expected[2] = 1'bX;
end 
// expected dataout[ 1 ]
initial
begin
	dataout_expected[1] = 1'bX;
end 
// expected dataout[ 0 ]
initial
begin
	dataout_expected[0] = 1'bX;
end 
// generate trigger
always @(comp_result_expected or comp_result or count_output_expected or count_output or dataout_expected or dataout or output_memory_expected or output_memory or q_expected or q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected comp_result = %b | expected count_output = %b | expected dataout = %b | expected output_memory = %b | expected q = %b | ",comp_result_expected_prev,count_output_expected_prev,dataout_expected_prev,output_memory_expected_prev,q_expected_prev);
	$display("| real comp_result = %b | real count_output = %b | real dataout = %b | real output_memory = %b | real q = %b | ",comp_result_prev,count_output_prev,dataout_prev,output_memory_prev,q_prev);
`endif
	if (
		( comp_result_expected_prev !== 1'bx ) && ( comp_result_prev !== comp_result_expected_prev )
		&& ((comp_result_expected_prev !== last_comp_result_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port comp_result :: @time = %t",  $realtime);
		$display ("     Expected value = %b", comp_result_expected_prev);
		$display ("     Real value = %b", comp_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_comp_result_exp = comp_result_expected_prev;
	end
	if (
		( count_output_expected_prev[0] !== 1'bx ) && ( count_output_prev[0] !== count_output_expected_prev[0] )
		&& ((count_output_expected_prev[0] !== last_count_output_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[0] = count_output_expected_prev[0];
	end
	if (
		( count_output_expected_prev[1] !== 1'bx ) && ( count_output_prev[1] !== count_output_expected_prev[1] )
		&& ((count_output_expected_prev[1] !== last_count_output_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[1] = count_output_expected_prev[1];
	end
	if (
		( count_output_expected_prev[2] !== 1'bx ) && ( count_output_prev[2] !== count_output_expected_prev[2] )
		&& ((count_output_expected_prev[2] !== last_count_output_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[2] = count_output_expected_prev[2];
	end
	if (
		( count_output_expected_prev[3] !== 1'bx ) && ( count_output_prev[3] !== count_output_expected_prev[3] )
		&& ((count_output_expected_prev[3] !== last_count_output_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[3] = count_output_expected_prev[3];
	end
	if (
		( count_output_expected_prev[4] !== 1'bx ) && ( count_output_prev[4] !== count_output_expected_prev[4] )
		&& ((count_output_expected_prev[4] !== last_count_output_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[4] = count_output_expected_prev[4];
	end
	if (
		( count_output_expected_prev[5] !== 1'bx ) && ( count_output_prev[5] !== count_output_expected_prev[5] )
		&& ((count_output_expected_prev[5] !== last_count_output_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[5] = count_output_expected_prev[5];
	end
	if (
		( count_output_expected_prev[6] !== 1'bx ) && ( count_output_prev[6] !== count_output_expected_prev[6] )
		&& ((count_output_expected_prev[6] !== last_count_output_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[6] = count_output_expected_prev[6];
	end
	if (
		( count_output_expected_prev[7] !== 1'bx ) && ( count_output_prev[7] !== count_output_expected_prev[7] )
		&& ((count_output_expected_prev[7] !== last_count_output_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_output_expected_prev);
		$display ("     Real value = %b", count_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_count_output_exp[7] = count_output_expected_prev[7];
	end
	if (
		( dataout_expected_prev[0] !== 1'bx ) && ( dataout_prev[0] !== dataout_expected_prev[0] )
		&& ((dataout_expected_prev[0] !== last_dataout_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[0] = dataout_expected_prev[0];
	end
	if (
		( dataout_expected_prev[1] !== 1'bx ) && ( dataout_prev[1] !== dataout_expected_prev[1] )
		&& ((dataout_expected_prev[1] !== last_dataout_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[1] = dataout_expected_prev[1];
	end
	if (
		( dataout_expected_prev[2] !== 1'bx ) && ( dataout_prev[2] !== dataout_expected_prev[2] )
		&& ((dataout_expected_prev[2] !== last_dataout_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[2] = dataout_expected_prev[2];
	end
	if (
		( dataout_expected_prev[3] !== 1'bx ) && ( dataout_prev[3] !== dataout_expected_prev[3] )
		&& ((dataout_expected_prev[3] !== last_dataout_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[3] = dataout_expected_prev[3];
	end
	if (
		( dataout_expected_prev[4] !== 1'bx ) && ( dataout_prev[4] !== dataout_expected_prev[4] )
		&& ((dataout_expected_prev[4] !== last_dataout_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[4] = dataout_expected_prev[4];
	end
	if (
		( dataout_expected_prev[5] !== 1'bx ) && ( dataout_prev[5] !== dataout_expected_prev[5] )
		&& ((dataout_expected_prev[5] !== last_dataout_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[5] = dataout_expected_prev[5];
	end
	if (
		( dataout_expected_prev[6] !== 1'bx ) && ( dataout_prev[6] !== dataout_expected_prev[6] )
		&& ((dataout_expected_prev[6] !== last_dataout_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[6] = dataout_expected_prev[6];
	end
	if (
		( dataout_expected_prev[7] !== 1'bx ) && ( dataout_prev[7] !== dataout_expected_prev[7] )
		&& ((dataout_expected_prev[7] !== last_dataout_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[7] = dataout_expected_prev[7];
	end
	if (
		( output_memory_expected_prev[0] !== 1'bx ) && ( output_memory_prev[0] !== output_memory_expected_prev[0] )
		&& ((output_memory_expected_prev[0] !== last_output_memory_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[0] = output_memory_expected_prev[0];
	end
	if (
		( output_memory_expected_prev[1] !== 1'bx ) && ( output_memory_prev[1] !== output_memory_expected_prev[1] )
		&& ((output_memory_expected_prev[1] !== last_output_memory_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[1] = output_memory_expected_prev[1];
	end
	if (
		( output_memory_expected_prev[2] !== 1'bx ) && ( output_memory_prev[2] !== output_memory_expected_prev[2] )
		&& ((output_memory_expected_prev[2] !== last_output_memory_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[2] = output_memory_expected_prev[2];
	end
	if (
		( output_memory_expected_prev[3] !== 1'bx ) && ( output_memory_prev[3] !== output_memory_expected_prev[3] )
		&& ((output_memory_expected_prev[3] !== last_output_memory_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[3] = output_memory_expected_prev[3];
	end
	if (
		( output_memory_expected_prev[4] !== 1'bx ) && ( output_memory_prev[4] !== output_memory_expected_prev[4] )
		&& ((output_memory_expected_prev[4] !== last_output_memory_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[4] = output_memory_expected_prev[4];
	end
	if (
		( output_memory_expected_prev[5] !== 1'bx ) && ( output_memory_prev[5] !== output_memory_expected_prev[5] )
		&& ((output_memory_expected_prev[5] !== last_output_memory_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[5] = output_memory_expected_prev[5];
	end
	if (
		( output_memory_expected_prev[6] !== 1'bx ) && ( output_memory_prev[6] !== output_memory_expected_prev[6] )
		&& ((output_memory_expected_prev[6] !== last_output_memory_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[6] = output_memory_expected_prev[6];
	end
	if (
		( output_memory_expected_prev[7] !== 1'bx ) && ( output_memory_prev[7] !== output_memory_expected_prev[7] )
		&& ((output_memory_expected_prev[7] !== last_output_memory_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_memory[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_memory_expected_prev);
		$display ("     Real value = %b", output_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_output_memory_exp[7] = output_memory_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projeto_final_forca_bruta_vlg_vec_tst();
// constants                                           
// general purpose registers
reg aclr;
reg choose;
reg clock;
reg clock_ram_2;
reg [7:0] datain;
reg [7:0] pos_manual;
reg we;
// wires                                               
wire comp_result;
wire [7:0] count_output;
wire [7:0] dataout;
wire [7:0] output_memory;
wire [7:0] q;

wire sampler;                             

// assign statements (if any)                          
projeto_final_forca_bruta i1 (
// port map - connection between master ports and signals/registers   
	.aclr(aclr),
	.choose(choose),
	.clock(clock),
	.clock_ram_2(clock_ram_2),
	.comp_result(comp_result),
	.count_output(count_output),
	.datain(datain),
	.dataout(dataout),
	.output_memory(output_memory),
	.pos_manual(pos_manual),
	.q(q),
	.we(we)
);
// pos_manual[ 7 ]
initial
begin
	pos_manual[7] = 1'b0;
end 
// pos_manual[ 6 ]
initial
begin
	pos_manual[6] = 1'b0;
end 
// pos_manual[ 5 ]
initial
begin
	pos_manual[5] = 1'b0;
end 
// pos_manual[ 4 ]
initial
begin
	pos_manual[4] = 1'b0;
end 
// pos_manual[ 3 ]
initial
begin
	pos_manual[3] = 1'b0;
end 
// pos_manual[ 2 ]
initial
begin
	pos_manual[2] = 1'b0;
end 
// pos_manual[ 1 ]
initial
begin
	pos_manual[1] = 1'b0;
	pos_manual[1] = #60000 1'b1;
	pos_manual[1] = #30000 1'b0;
end 
// pos_manual[ 0 ]
initial
begin
	pos_manual[0] = 1'b0;
	pos_manual[0] = #30000 1'b1;
	pos_manual[0] = #30000 1'b0;
end 

// choose
initial
begin
	choose = 1'b1;
	choose = #90000 1'b0;
end 
// datain[ 7 ]
initial
begin
	datain[7] = 1'b0;
end 
// datain[ 6 ]
initial
begin
	datain[6] = 1'b0;
end 
// datain[ 5 ]
initial
begin
	datain[5] = 1'b0;
end 
// datain[ 4 ]
initial
begin
	datain[4] = 1'b0;
end 
// datain[ 3 ]
initial
begin
	datain[3] = 1'b0;
end 
// datain[ 2 ]
initial
begin
	datain[2] = 1'b1;
	datain[2] = #90000 1'b0;
end 
// datain[ 1 ]
initial
begin
	datain[1] = 1'b1;
	datain[1] = #30000 1'b0;
	datain[1] = #30000 1'b1;
	datain[1] = #30000 1'b0;
end 
// datain[ 0 ]
initial
begin
	datain[0] = 1'b1;
	datain[0] = #30000 1'b0;
end 

// clock
initial
begin
	repeat(33)
	begin
		clock = 1'b0;
		clock = #15000 1'b1;
		# 15000;
	end
	clock = 1'b0;
end 

// clock_ram_2
always
begin
	clock_ram_2 = 1'b0;
	clock_ram_2 = #5000 1'b1;
	#5000;
end 

// we
initial
begin
	we = 1'b1;
	we = #90000 1'b0;
end 

// aclr
initial
begin
	aclr = 1'b0;
	aclr = #90000 1'b1;
	aclr = #180000 1'b0;
end 

projeto_final_forca_bruta_vlg_sample_tst tb_sample (
	.aclr(aclr),
	.choose(choose),
	.clock(clock),
	.clock_ram_2(clock_ram_2),
	.datain(datain),
	.pos_manual(pos_manual),
	.we(we),
	.sampler_tx(sampler)
);

projeto_final_forca_bruta_vlg_check_tst tb_out(
	.comp_result(comp_result),
	.count_output(count_output),
	.dataout(dataout),
	.output_memory(output_memory),
	.q(q),
	.sampler_rx(sampler)
);
endmodule

